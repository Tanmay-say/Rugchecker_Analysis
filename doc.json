{
    "schemes": [],
    "swagger": "2.0",
    "info": {
        "description": "JWT token for authentication",
        "title": "RugCheck API",
        "contact": {},
        "license": {},
        "version": "1.0"
    },
    "host": "api.rugcheck.xyz",
    "basePath": "/v1",
    "paths": {
        "/auth/login/solana": {
            "post": {
                "description": "Login to RugCheck by signing a message with a Solana private key\nMessage to sign: \"Sign-in to Rugcheck.xyz\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login with Solana",
                "parameters": [
                    {
                        "description": "Auth request containing wallet, message and signature",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token for API access",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/domains": {
            "get": {
                "description": "Returns all registered .token domains",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Domains"
                ],
                "summary": "Get registered domains",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for results",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter to only domains with verification set",
                        "name": "verified",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns all registered domains",
                        "schema": {
                            "$ref": "#/definitions/dto.DomainResponse"
                        }
                    }
                }
            }
        },
        "/domains/data.csv": {
            "get": {
                "description": "Returns all registered .token domains as CSV",
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "Domains"
                ],
                "summary": "Get domains CSV",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Filter to only domains with verification set",
                        "name": "verified",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV file containing domain data",
                        "schema": {
                            "type": "file"
                        }
                    }
                }
            }
        },
        "/domains/lookup/{id}": {
            "get": {
                "description": "Returns the related domain address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Domains"
                ],
                "summary": "Lookup domain address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Domain name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Domain address",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/domains/records/{id}": {
            "get": {
                "description": "Returns the related domain records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Domains"
                ],
                "summary": "Get domain records",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Domain name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Domain records",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/leaderboard": {
            "get": {
                "description": "Get user leaderboard rankings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get leaderboard",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Results per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Leaderboard rankings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rugcheck_api.User"
                            }
                        }
                    }
                }
            }
        },
        "/maintenance": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Maintenance service",
                "responses": {
                    "200": {
                        "description": "Returns pong if the service is up and running",
                        "schema": {
                            "$ref": "#/definitions/dto.Pong"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Ping service",
                "responses": {
                    "200": {
                        "description": "Returns pong if the service is up and running",
                        "schema": {
                            "$ref": "#/definitions/dto.Pong"
                        }
                    }
                }
            }
        },
        "/rpc/stats": {
            "get": {
                "description": "Get statistics about RPC node usage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get RPC statistics"
            }
        },
        "/stats/new_tokens": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stats"
                ],
                "summary": "Recently detected tokens",
                "responses": {
                    "200": {
                        "description": "Returns the recently detected tokens",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rugcheck_api.Token"
                            }
                        }
                    }
                }
            }
        },
        "/stats/recent": {
            "get": {
                "description": "Only users who have connected their wallet have their views counted",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stats"
                ],
                "summary": "Most viewed tokens in past 24 hours",
                "responses": {
                    "200": {
                        "description": "Returns the most viewed for token mints",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.TokenInfoAgg"
                            }
                        }
                    }
                }
            }
        },
        "/stats/trending": {
            "get": {
                "description": "Only users who have connected their wallet are able to vote",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stats"
                ],
                "summary": "Most voted for tokens in past 24 hours",
                "responses": {
                    "200": {
                        "description": "Returns the most voted for token mints",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.TrendingToken"
                            }
                        }
                    }
                }
            }
        },
        "/stats/verified": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stats"
                ],
                "summary": "Recently verified tokens",
                "responses": {
                    "200": {
                        "description": "Returns the recently verified tokens",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rugcheck_api.VerifiedToken"
                            }
                        }
                    }
                }
            }
        },
        "/tokens/verify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Submit token for verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Verify token",
                "parameters": [
                    {
                        "description": "Verification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TokenVerificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification submitted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tokens/verify/eligible": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Check if token is eligible for verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Check token eligibility",
                "parameters": [
                    {
                        "description": "Eligibility request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TokenEligibilityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Eligibility status",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenEligibilityResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tokens/verify/transaction": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get transaction for token verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Get verification transaction",
                "parameters": [
                    {
                        "description": "Transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TokenVerificationTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction data",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenVerificationTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{id}/insiders/graph": {
            "get": {
                "description": "Generate an insider graph for given token mint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Get token insider graph",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token mint address",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{id}/lockers": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Returns the tokens LP vaults",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token mint address",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the tokens LP lockers",
                        "schema": {
                            "$ref": "#/definitions/dto.VaultResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{id}/lockers/flux": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vaults"
                ],
                "summary": "Returns the tokens LP vaults from flux locker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token mint address",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the tokens LP lockers from flux locker",
                        "schema": {
                            "$ref": "#/definitions/dto.VaultResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{id}/report": {
            "get": {
                "description": "Generate a detailed report for given token mint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Get full token report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token mint address",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Full token report",
                        "schema": {
                            "$ref": "#/definitions/rugcheck_api.TokenCheck"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Report a suspicious token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Report token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token mint address",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report submitted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{id}/report/summary": {
            "get": {
                "description": "Generate a report summary for given token mint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Get token report summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token mint address",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Only return cached reports",
                        "name": "cacheOnly",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token report summary",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenCheckSummary"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{id}/vote": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Vote on a token mint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Submit token vote",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token mint address",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Vote request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VoteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated vote statistics",
                        "schema": {
                            "$ref": "#/definitions/dto.VoteResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{id}/votes": {
            "get": {
                "description": "Returns the voting statistics for a token mint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Get token votes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token mint address",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token vote statistics",
                        "schema": {
                            "$ref": "#/definitions/dto.VoteResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AuthMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "dto.AuthRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "object",
                    "$ref": "#/definitions/dto.AuthMessage"
                },
                "signature": {
                    "type": "object",
                    "properties": {
                        "data": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "type": {
                            "type": "string"
                        }
                    }
                },
                "wallet": {
                    "type": "string"
                }
            }
        },
        "dto.AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.DomainResponse": {
            "type": "object",
            "properties": {
                "tokens": {
                    "type": "object",
                    "$ref": "#/definitions/rugcheck_api.VerifiedTokenSimple"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "dto.Pong": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.SuccessResponse": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean"
                }
            }
        },
        "dto.TokenCheckSummary": {
            "type": "object",
            "properties": {
                "risks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rugcheck_api.Risk"
                    }
                },
                "score": {
                    "type": "integer"
                },
                "score_normalised": {
                    "type": "integer"
                },
                "tokenProgram": {
                    "type": "string"
                },
                "tokenType": {
                    "type": "string"
                }
            }
        },
        "dto.TokenEligibilityRequest": {
            "type": "object",
            "properties": {
                "mint": {
                    "type": "string"
                }
            }
        },
        "dto.TokenEligibilityResponse": {
            "type": "object",
            "properties": {
                "criteria": {
                    "type": "object",
                    "$ref": "#/definitions/rugcheck_api.EligibilityResponse"
                },
                "eligible": {
                    "type": "boolean"
                },
                "mint": {
                    "type": "string"
                }
            }
        },
        "dto.TokenInfoAgg": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/rugcheck_api.TokenMetadata"
                },
                "mint": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                },
                "user_visits": {
                    "type": "integer"
                },
                "visits": {
                    "type": "integer"
                }
            }
        },
        "dto.TokenVerificationData": {
            "type": "object",
            "required": [
                "dataIntegrityAccepted",
                "description",
                "solDomain",
                "termsAccepted"
            ],
            "properties": {
                "dataIntegrityAccepted": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "solDomain": {
                    "description": "*.token",
                    "type": "string"
                },
                "termsAccepted": {
                    "type": "boolean"
                }
            }
        },
        "dto.TokenVerificationRequest": {
            "type": "object",
            "required": [
                "mint",
                "payer",
                "signature"
            ],
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/dto.TokenVerificationData"
                },
                "mint": {
                    "type": "string"
                },
                "payer": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                }
            }
        },
        "dto.TokenVerificationTransactionRequest": {
            "type": "object",
            "required": [
                "mint",
                "payer"
            ],
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/dto.TokenVerificationData"
                },
                "mint": {
                    "type": "string"
                },
                "payer": {
                    "type": "string"
                },
                "priority_fee": {
                    "type": "integer"
                }
            }
        },
        "dto.TokenVerificationTransactionResponse": {
            "type": "object",
            "properties": {
                "transaction": {
                    "type": "string"
                }
            }
        },
        "dto.VaultResponse": {
            "type": "object",
            "properties": {
                "lockers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/rugcheck_api.Locker"
                    }
                },
                "total": {
                    "type": "object",
                    "$ref": "#/definitions/dto.VaultResponseSummary"
                }
            }
        },
        "dto.VaultResponseSummary": {
            "type": "object",
            "properties": {
                "pct": {
                    "type": "number"
                },
                "totalUSDC": {
                    "type": "number"
                }
            }
        },
        "dto.VoteRequest": {
            "type": "object",
            "properties": {
                "mint": {
                    "type": "string"
                },
                "side": {
                    "type": "boolean"
                }
            }
        },
        "dto.VoteResponse": {
            "type": "object",
            "properties": {
                "down": {
                    "type": "integer"
                },
                "up": {
                    "type": "integer"
                },
                "userVoted": {
                    "type": "boolean"
                }
            }
        },
        "rugcheck_api.CreatorToken": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "marketCap": {
                    "type": "number"
                },
                "mint": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.EligibilityResponse": {
            "type": "object",
            "properties": {
                "created_recently": {
                    "type": "boolean"
                },
                "duplicate": {
                    "type": "boolean"
                },
                "exists": {
                    "type": "boolean"
                },
                "freeze_authority_set": {
                    "type": "boolean"
                },
                "liquidity_unlocked": {
                    "type": "boolean"
                },
                "metadata_missing": {
                    "type": "boolean"
                },
                "mint_authority_set": {
                    "type": "boolean"
                },
                "risk_score": {
                    "type": "integer"
                }
            }
        },
        "rugcheck_api.FileMetadata": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.InsiderNetwork": {
            "type": "object",
            "properties": {
                "activeAccounts": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "tokenAmount": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.KnownAccount": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.Locker": {
            "type": "object",
            "properties": {
                "owner": {
                    "type": "string"
                },
                "programID": {
                    "type": "string"
                },
                "tokenAccount": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unlockDate": {
                    "type": "integer"
                },
                "uri": {
                    "type": "string"
                },
                "usdcLocked": {
                    "type": "number"
                }
            }
        },
        "rugcheck_api.Market": {
            "type": "object",
            "properties": {
                "liquidityA": {
                    "type": "string"
                },
                "liquidityAAccount": {
                    "type": "string"
                },
                "liquidityB": {
                    "type": "string"
                },
                "liquidityBAccount": {
                    "type": "string"
                },
                "lp": {
                    "type": "object",
                    "$ref": "#/definitions/rugcheck_api.MarketLP"
                },
                "marketType": {
                    "type": "string"
                },
                "mintA": {
                    "type": "string"
                },
                "mintAAccount": {
                    "type": "string"
                },
                "mintB": {
                    "type": "string"
                },
                "mintBAccount": {
                    "type": "string"
                },
                "mintLP": {
                    "type": "string"
                },
                "mintLPAccount": {
                    "type": "string"
                },
                "pubkey": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.MarketLP": {
            "type": "object",
            "properties": {
                "base": {
                    "type": "number"
                },
                "baseMint": {
                    "type": "string"
                },
                "basePrice": {
                    "type": "number"
                },
                "baseUSD": {
                    "type": "number"
                },
                "currentSupply": {
                    "type": "integer"
                },
                "holders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rugcheck_api.TokenHolder"
                    }
                },
                "lpCurrentSupply": {
                    "type": "integer"
                },
                "lpLocked": {
                    "type": "integer"
                },
                "lpLockedPct": {
                    "type": "number"
                },
                "lpLockedUSD": {
                    "type": "number"
                },
                "lpMaxSupply": {
                    "type": "integer"
                },
                "lpMint": {
                    "type": "string"
                },
                "lpTotalSupply": {
                    "type": "integer"
                },
                "lpUnlocked": {
                    "type": "integer"
                },
                "pctReserve": {
                    "type": "number"
                },
                "pctSupply": {
                    "type": "number"
                },
                "quote": {
                    "type": "number"
                },
                "quoteMint": {
                    "type": "string"
                },
                "quotePrice": {
                    "type": "number"
                },
                "quoteUSD": {
                    "type": "number"
                },
                "reserveSupply": {
                    "type": "integer"
                },
                "tokenSupply": {
                    "type": "integer"
                },
                "totalTokensUnlocked": {
                    "type": "integer"
                }
            }
        },
        "rugcheck_api.Risk": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.Token": {
            "type": "object",
            "properties": {
                "createAt": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "decimals": {
                    "type": "integer"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rugcheck_api.TokenEvent"
                    }
                },
                "freezeAuthority": {
                    "type": "string"
                },
                "mint": {
                    "type": "string"
                },
                "mintAuthority": {
                    "type": "string"
                },
                "program": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.TokenCheck": {
            "type": "object",
            "properties": {
                "creator": {
                    "type": "string"
                },
                "creatorTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rugcheck_api.CreatorToken"
                    }
                },
                "detectedAt": {
                    "type": "string"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rugcheck_api.TokenEvent"
                    }
                },
                "fileMeta": {
                    "type": "object",
                    "$ref": "#/definitions/rugcheck_api.FileMetadata"
                },
                "freezeAuthority": {
                    "type": "string"
                },
                "graphInsidersDetected": {
                    "type": "integer"
                },
                "insiderNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rugcheck_api.InsiderNetwork"
                    }
                },
                "knownAccounts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/rugcheck_api.KnownAccount"
                    }
                },
                "lockerOwners": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "lockers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/rugcheck_api.Locker"
                    }
                },
                "markets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rugcheck_api.Market"
                    }
                },
                "mint": {
                    "type": "string"
                },
                "mintAuthority": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "risks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rugcheck_api.Risk"
                    }
                },
                "rugged": {
                    "type": "boolean"
                },
                "score": {
                    "type": "integer"
                },
                "score_normalised": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                },
                "tokenMeta": {
                    "description": "TODO Meta struct",
                    "type": "object",
                    "$ref": "#/definitions/rugcheck_api.TokenMetadata"
                },
                "tokenProgram": {
                    "type": "string"
                },
                "tokenType": {
                    "type": "string"
                },
                "token_extensions": {
                    "type": "string"
                },
                "topHolders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rugcheck_api.TokenHolder"
                    }
                },
                "totalHolders": {
                    "type": "integer"
                },
                "totalLPProviders": {
                    "type": "integer"
                },
                "totalMarketLiquidity": {
                    "type": "number"
                },
                "transferFee": {
                    "type": "object",
                    "properties": {
                        "authority": {
                            "type": "string"
                        },
                        "maxAmount": {
                            "type": "number"
                        },
                        "pct": {
                            "type": "number"
                        }
                    }
                },
                "verification": {
                    "type": "object",
                    "$ref": "#/definitions/rugcheck_api.VerifiedToken"
                }
            }
        },
        "rugcheck_api.TokenEvent": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "event": {
                    "type": "integer"
                },
                "newValue": {
                    "type": "string"
                },
                "oldValue": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.TokenHolder": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "amount": {
                    "type": "integer"
                },
                "decimals": {
                    "type": "integer"
                },
                "insider": {
                    "type": "boolean"
                },
                "owner": {
                    "type": "string"
                },
                "pct": {
                    "type": "number"
                },
                "uiAmount": {
                    "type": "number"
                },
                "uiAmountString": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.TokenMetadata": {
            "type": "object",
            "properties": {
                "mutable": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "updateAuthority": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.User": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "votes": {
                    "type": "integer"
                },
                "weight": {
                    "type": "integer"
                },
                "wins": {
                    "type": "integer"
                }
            }
        },
        "rugcheck_api.VerifiedToken": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "jup_strict": {
                    "type": "boolean"
                },
                "jup_verified": {
                    "type": "boolean"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rugcheck_api.VerifiedTokenLinks"
                    }
                },
                "mint": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "payer": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.VerifiedTokenLinks": {
            "type": "object",
            "properties": {
                "provider": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "rugcheck_api.VerifiedTokenSimple": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "mint": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "services.TrendingToken": {
            "type": "object",
            "properties": {
                "mint": {
                    "type": "string"
                },
                "up_count": {
                    "type": "integer"
                },
                "vote_count": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Authentication endpoints",
            "name": "Auth"
        },
        {
            "description": "Domain name related endpoints",
            "name": "Domains"
        },
        {
            "description": "General purpose endpoints",
            "name": "General"
        },
        {
            "description": "Statistical information endpoints",
            "name": "Stats"
        },
        {
            "description": "Token related endpoints",
            "name": "Tokens"
        },
        {
            "description": "Token vault related endpoints",
            "name": "Vaults"
        },
        {
            "description": "Token voting related endpoints",
            "name": "Votes"
        }
    ]
}